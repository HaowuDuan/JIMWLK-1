
using namespace blitz;



vector < TinyMatrix<double,8,8>  > get_F()
{
		vector < TinyMatrix<double,8,8>  > F(8);
	
    for (int i=0;i<8; i++) F.at(i)= 0.0;

		F.at(1-1)(2-1,3-1) = 1.0;
		F.at(1-1)(3-1,2-1) = -1.0;
		F.at(1-1)(4-1,7-1) = 0.5;
		F.at(1-1)(7-1,4-1) = -0.5;
		F.at(1-1)(5-1,6-1) = -0.5;
		F.at(1-1)(6-1,5-1) = 0.5;
		
		F.at(2-1)(3-1,1-1) = 1.0;
		F.at(2-1)(1-1,3-1) = -1.0;
		F.at(2-1)(4-1,6-1) = 0.5;
		F.at(2-1)(6-1,4-1) = -0.5;
		F.at(2-1)(5-1,7-1) = 0.5;
		F.at(2-1)(7-1,5-1) = 0.5;

		F.at(3-1)(1-1,2-1) = 1.0;
		F.at(3-1)(2-1,1-1) = -1.0;
		F.at(3-1)(4-1,5-1) = 0.5;
		F.at(3-1)(5-1,4-1) = -0.5;
		F.at(3-1)(6-1,7-1) = -0.5;
		F.at(3-1)(7-1,6-1) = 0.5;
		
		F.at(4-1)(7-1,1-1) = 0.5;
		F.at(4-1)(1-1,7-1) = -0.5;
		F.at(4-1)(6-1,2-1) = 0.5;
		F.at(4-1)(2-1,6-1) = -0.5;
		F.at(4-1)(5-1,3-1) = 0.5;
		F.at(4-1)(3-1,5-1) = -0.5;
		F.at(4-1)(5-1,8-1) = sqrt(3)/2.0;
		F.at(4-1)(8-1,5-1) = -sqrt(3)/2.0;
		
		F.at(5-1)(6-1,1-1) = -0.5;
		F.at(5-1)(1-1,6-1) = 0.5;
		F.at(5-1)(7-1,2-1) = 0.5;
		F.at(5-1)(2-1,7-1) = -0.5;
		F.at(5-1)(3-1,4-1) = 0.5;
		F.at(5-1)(4-1,3-1) = -0.5;
		F.at(5-1)(8-1,4-1) = sqrt(3)/2.0;
		F.at(5-1)(4-1,8-1) = -sqrt(3)/2.0;


		F.at(6-1)(7-1,8-1) = sqrt(3)/2.0;
		F.at(6-1)(8-1,7-1) = sqrt(3)/2.0;
		F.at(6-1)(1-1,5-1) = -0.5;
		F.at(6-1)(5-1,1-1) = 0.5;
    F.at(6-1)(2-1,4-1) = 0.5;
    F.at(6-1)(4-1,2-1) = -0.5;
    F.at(6-1)(7-1,3-1) = -0.5;
    F.at(6-1)(3-1,7-1) = -0.5;


    F.at(7-1)(1-1,4-1) = 0.5;
    F.at(7-1)(4-1,1-1) = -0.5;
    F.at(7-1)(2-1,5-1) = 0.5;
    F.at(7-1)(5-1,2-1) = -0.5;
    F.at(7-1)(3-1,6-1) = -0.5;
    F.at(7-1)(6-1,3-1) = 0.5;
    F.at(7-1)(8-1,6-1) = sqrt(3)/2.0;
    F.at(7-1)(6-1,8-1) = -sqrt(3)/2.0;
    
		
		F.at(8-1)(4-1,5-1) = sqrt(3)/2.0;
		F.at(8-1)(5-1,4-1) = -sqrt(3)/2.0;
		F.at(8-1)(6-1,7-1) = sqrt(3)/2.0;
		F.at(8-1)(7-1,6-1) = -sqrt(3)/2.0;
		

		return F;
}




vector < TinyMatrix<cd,3,3>  > get_lambda()
{
		vector < TinyMatrix<cd,3,3>  > lambda(9);
    //for (int i =0; i<lambda.size(); i++) lambda.at(i).resize(3,3);
	
    lambda.at(0)= 
		cd(0,0), cd(1,0), cd(0,0),
    cd(1,0), cd(0,0), cd(0,0),
    cd(0,0), cd(0,0), cd(0,0);

    lambda.at(1)= 
		cd(0,0), cd(0,-1), cd(0,0),
    cd(0,1), cd(0,0), cd(0,0),
    cd(0,0), cd(0,0), cd(0,0);

    lambda.at(2)= 
		cd(1,0), cd(0,0), cd(0,0),
    cd(0,0), cd(-1,0), cd(0,0),
    cd(0,0), cd(0,0), cd(0,0);

    lambda.at(3)= 
		cd(0,0), cd(0,0), cd(1,0),
    cd(0,0), cd(0,0), cd(0,0),
    cd(1,0), cd(0,0), cd(0,0);

    lambda.at(4)= 
		cd(0,0), cd(0,0), cd(0,-1),
    cd(0,0), cd(0,0), cd(0,0),
    cd(0,1), cd(0,0), cd(0,0);

    lambda.at(5)= 
		cd(0,0), cd(0,0), cd(0,0),
    cd(0,0), cd(0,0), cd(1,0),
    cd(0,0), cd(1,0), cd(0,0);

    lambda.at(6)= 
		cd(0,0), cd(0,0), cd(0,0),
    cd(0,0), cd(0,0), cd(0,-1),
    cd(0,0), cd(0,1), cd(0,0);

    lambda.at(7)= 
		cd(1/sqrt(3),0), cd(0,0), cd(0,0),
    cd(0,0), cd(1/sqrt(3),0), cd(0,0),
    cd(0,0), cd(0,0), cd(-2/sqrt(3),0);


    lambda.at(8)= 
		cd(1,0), cd(0,0), cd(0,0),
    cd(0,0), cd(1,0), cd(0,0),
    cd(0,0), cd(0,0), cd(1,0);

		lambda.at(8) *= cd(sqrt(2.0/3.0),0);

		for (int i=0;i<lambda.size();i++) lambda.at(i)*=cd(0.5,0);

return lambda;
}
